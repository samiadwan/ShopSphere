import type { OnDestroy } from '@angular/core';
import { InitializationStrategy } from '@ngrx-addons/common';
import type { ActionReducerMap } from '@ngrx/store';
import { Store } from '@ngrx/store';
import type { PersistStateFeatureConfig } from './persist-state.config';
import { PersistStateRootConfig } from './persist-state.config';
import * as i0 from "@angular/core";
export declare class PersistState<T extends ActionReducerMap<unknown> = ActionReducerMap<unknown>> implements OnDestroy {
    #private;
    private readonly store;
    private readonly strategy;
    constructor(store: Store, strategy: InitializationStrategy, rootConfig: PersistStateRootConfig<T>);
    addRoot(): void;
    addFeature<F>(feature: PersistStateFeatureConfig<F>): void;
    removeFeature(key: string): void;
    ngOnDestroy(): void;
    private defaultStateConfig;
    private listenOnStates;
    private runMigrations;
    private rehydrateWhen;
    static ɵfac: i0.ɵɵFactoryDeclaration<PersistState<any>, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<PersistState<any>>;
}
