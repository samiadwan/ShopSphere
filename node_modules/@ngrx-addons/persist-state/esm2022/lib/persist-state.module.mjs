import { NgModule } from '@angular/core';
import { PersistStateFeatureModule } from './persist-state.feature.module';
import { _providePersistStore, _providePersistState, } from './persist-state.provider';
import { PersistStateRootModule } from './persist-state.root.module';
import * as i0 from "@angular/core";
export class PersistStateModule {
    static forRoot(config = {}) {
        return {
            ngModule: PersistStateRootModule,
            providers: [..._providePersistStore(config)],
        };
    }
    static forFeature(config) {
        return {
            ngModule: PersistStateFeatureModule,
            providers: [..._providePersistState(config)],
        };
    }
    /** @nocollapse */ static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.3", ngImport: i0, type: PersistStateModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    /** @nocollapse */ static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "18.0.3", ngImport: i0, type: PersistStateModule }); }
    /** @nocollapse */ static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "18.0.3", ngImport: i0, type: PersistStateModule }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.3", ngImport: i0, type: PersistStateModule, decorators: [{
            type: NgModule
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVyc2lzdC1zdGF0ZS5tb2R1bGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9saWJzL3BlcnNpc3Qtc3RhdGUvc3JjL2xpYi9wZXJzaXN0LXN0YXRlLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBSXpDLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQzNFLE9BQU8sRUFDTCxvQkFBb0IsRUFDcEIsb0JBQW9CLEdBQ3JCLE1BQU0sMEJBQTBCLENBQUM7QUFDbEMsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sNkJBQTZCLENBQUM7O0FBR3JFLE1BQU0sT0FBTyxrQkFBa0I7SUFDdEIsTUFBTSxDQUFDLE9BQU8sQ0FLbkIsU0FBdUMsRUFBRTtRQUV6QyxPQUFPO1lBQ0wsUUFBUSxFQUFFLHNCQUFzQjtZQUNoQyxTQUFTLEVBQUUsQ0FBQyxHQUFHLG9CQUFvQixDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQzdDLENBQUM7SUFDSixDQUFDO0lBRU0sTUFBTSxDQUFDLFVBQVUsQ0FDdEIsTUFBb0M7UUFFcEMsT0FBTztZQUNMLFFBQVEsRUFBRSx5QkFBeUI7WUFDbkMsU0FBUyxFQUFFLENBQUMsR0FBRyxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUM3QyxDQUFDO0lBQ0osQ0FBQztpSUFyQlUsa0JBQWtCO2tJQUFsQixrQkFBa0I7a0lBQWxCLGtCQUFrQjs7MkZBQWxCLGtCQUFrQjtrQkFEOUIsUUFBUSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgTW9kdWxlV2l0aFByb3ZpZGVycyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB0eXBlIHsgQWN0aW9uLCBBY3Rpb25SZWR1Y2VyTWFwIH0gZnJvbSAnQG5ncngvc3RvcmUnO1xuaW1wb3J0IHR5cGUgeyBQZXJzaXN0U3RhdGVGZWF0dXJlQ29uZmlnIH0gZnJvbSAnLi9wZXJzaXN0LXN0YXRlLmNvbmZpZyc7XG5pbXBvcnQgeyBQZXJzaXN0U3RhdGVSb290Q29uZmlnIH0gZnJvbSAnLi9wZXJzaXN0LXN0YXRlLmNvbmZpZyc7XG5pbXBvcnQgeyBQZXJzaXN0U3RhdGVGZWF0dXJlTW9kdWxlIH0gZnJvbSAnLi9wZXJzaXN0LXN0YXRlLmZlYXR1cmUubW9kdWxlJztcbmltcG9ydCB7XG4gIF9wcm92aWRlUGVyc2lzdFN0b3JlLFxuICBfcHJvdmlkZVBlcnNpc3RTdGF0ZSxcbn0gZnJvbSAnLi9wZXJzaXN0LXN0YXRlLnByb3ZpZGVyJztcbmltcG9ydCB7IFBlcnNpc3RTdGF0ZVJvb3RNb2R1bGUgfSBmcm9tICcuL3BlcnNpc3Qtc3RhdGUucm9vdC5tb2R1bGUnO1xuXG5ATmdNb2R1bGUoKVxuZXhwb3J0IGNsYXNzIFBlcnNpc3RTdGF0ZU1vZHVsZSB7XG4gIHB1YmxpYyBzdGF0aWMgZm9yUm9vdDxcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIFQgZXh0ZW5kcyBBY3Rpb25SZWR1Y2VyTWFwPGFueSwgVj4sXG4gICAgViBleHRlbmRzIEFjdGlvbiA9IEFjdGlvbixcbiAgPihcbiAgICBjb25maWc6IFBlcnNpc3RTdGF0ZVJvb3RDb25maWc8VCwgVj4gPSB7fSxcbiAgKTogTW9kdWxlV2l0aFByb3ZpZGVyczxQZXJzaXN0U3RhdGVSb290TW9kdWxlPiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5nTW9kdWxlOiBQZXJzaXN0U3RhdGVSb290TW9kdWxlLFxuICAgICAgcHJvdmlkZXJzOiBbLi4uX3Byb3ZpZGVQZXJzaXN0U3RvcmUoY29uZmlnKV0sXG4gICAgfTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgZm9yRmVhdHVyZTxUPihcbiAgICBjb25maWc6IFBlcnNpc3RTdGF0ZUZlYXR1cmVDb25maWc8VD4sXG4gICk6IE1vZHVsZVdpdGhQcm92aWRlcnM8UGVyc2lzdFN0YXRlRmVhdHVyZU1vZHVsZT4ge1xuICAgIHJldHVybiB7XG4gICAgICBuZ01vZHVsZTogUGVyc2lzdFN0YXRlRmVhdHVyZU1vZHVsZSxcbiAgICAgIHByb3ZpZGVyczogWy4uLl9wcm92aWRlUGVyc2lzdFN0YXRlKGNvbmZpZyldLFxuICAgIH07XG4gIH1cbn1cbiJdfQ==