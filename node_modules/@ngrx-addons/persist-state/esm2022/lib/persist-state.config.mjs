import { InjectionToken } from '@angular/core';
export class PersistStateRootConfig {
}
export class PersistStateFeatureConfig {
}
/**
 * Injection token for the strategy used to initialize the state.
 */
export const PersistStateStrategy = new InjectionToken('persist-state-init-strategy');
/**
 * Injection token for the list of states to persist.
 */
export const PERSIST_STATE_FEATURE_CONFIGS = new InjectionToken('persist-state-feature-configs');
export const ROOT_PERSIST_STORE = new InjectionToken('persist-state-root');
export const FEATURE_PERSIST_STATE = new InjectionToken('persist-state-feature');
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVyc2lzdC1zdGF0ZS5jb25maWcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9saWJzL3BlcnNpc3Qtc3RhdGUvc3JjL2xpYi9wZXJzaXN0LXN0YXRlLmNvbmZpZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBc0YvQyxNQUFNLE9BQWdCLHNCQUFzQjtDQW1CM0M7QUFFRCxNQUFNLE9BQWdCLHlCQUF5QjtDQVM5QztBQUVEOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sb0JBQW9CLEdBQUcsSUFBSSxjQUFjLENBQ3BELDZCQUE2QixDQUM5QixDQUFDO0FBRUY7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSw2QkFBNkIsR0FBRyxJQUFJLGNBQWMsQ0FFN0QsK0JBQStCLENBQUMsQ0FBQztBQUVuQyxNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBRyxJQUFJLGNBQWMsQ0FDbEQsb0JBQW9CLENBQ3JCLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxxQkFBcUIsR0FBRyxJQUFJLGNBQWMsQ0FDckQsdUJBQXVCLENBQ3hCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3Rpb25Ub2tlbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHR5cGUgeyBJbml0aWFsaXphdGlvblN0cmF0ZWd5IH0gZnJvbSAnQG5ncngtYWRkb25zL2NvbW1vbic7XG5pbXBvcnQgeyB0eXBlIEFueUZ1bmN0aW9uLCB0eXBlIFN0YXRlIH0gZnJvbSAnQG5ncngtYWRkb25zL2NvbW1vbic7XG5pbXBvcnQgdHlwZSB7IEFjdGlvbiwgQWN0aW9uUmVkdWNlck1hcCB9IGZyb20gJ0BuZ3J4L3N0b3JlJztcbmltcG9ydCB0eXBlIHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHR5cGUgeyBTdGF0ZVN0b3JhZ2UgfSBmcm9tICcuL3N0b3JhZ2UnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFN0YXRlTWlncmF0aW9uPFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICBUT2xkU3RhdGUgPSBhbnksXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gIFROZXdTdGF0ZSA9IGFueSxcbiAgVFZlcnNpb25LZXkgPSBzdHJpbmcsXG4+IHtcbiAgLyoqXG4gICAqIFRoZSB2ZXJzaW9uIG9mIHRoZSBzdGF0ZSB0byBtaWdyYXRlIGZyb20uXG4gICAqL1xuICB2ZXJzaW9uOiBudW1iZXIgfCBzdHJpbmcgfCB1bmRlZmluZWQ7XG4gIC8qKlxuICAgKiBUaGUgbWlncmF0aW9uIGZ1bmN0aW9uIGZyb20gdGhlIG9sZCBzdGF0ZSB0byB0aGUgbmV3IG9uZVxuICAgKi9cbiAgbWlncmF0ZShvbGRTdGF0ZTogVE9sZFN0YXRlKTogVE5ld1N0YXRlO1xuICAvKipcbiAgICogVGhlIGtleSBmb3IgdGhlIHZlcnNpb24gaW4gdGhlIHN0b3JhZ2UuXG4gICAqXG4gICAqIEBkZWZhdWx0ICd2ZXJzaW9uJ1xuICAgKi9cbiAgdmVyc2lvbktleT86IFRWZXJzaW9uS2V5O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBlcnNpc3RTdGF0ZUNvbmZpZzxTPiB7XG4gIC8qKlxuICAgKiBBbiBvYmplY3Qgb3IgZnVuY3Rpb24gcmVzb2x2aW5nIHRvIGFuIG9iamVjdCB3aXRoIGFzeW5jIHNldEl0ZW0sXG4gICAqIGdldEl0ZW0gYW5kIHJlbW92ZUl0ZW0gbWV0aG9kcyBmb3Igc3RvcmluZyB0aGUgc3RhdGVcbiAgICovXG4gIHN0b3JhZ2U6IFN0YXRlU3RvcmFnZSB8ICgoKSA9PiBTdGF0ZVN0b3JhZ2UpO1xuICAvKipcbiAgICogVGhlIG5hbWUgdW5kZXIgd2hpY2ggdGhlIHN0b3JlIHN0YXRlIGlzIHNhdmVkLlxuICAgKlxuICAgKiBAZGVmYXVsdCB0aGUgcHJlZml4IHBsdXMgc3RvcmUgbmFtZSBwbHVzIGEgYEBzdG9yZWAgc3VmZml4XG4gICAqL1xuICBzdG9yYWdlS2V5Pzogc3RyaW5nO1xuICAvKipcbiAgICogQSBtZXRob2QgdGhhdCByZWNlaXZlcyB0aGUgb2JzZXJ2YWJsZSBvZiBhIHN0YXRlIGFuZCByZXR1cm4gd2hhdCB0byBzYXZlIGZyb20gaXQuXG4gICAqXG4gICAqIEBkZWZhdWx0IChzdGF0ZSkgPT4gc3RhdGVcbiAgICovXG4gIHNvdXJjZT86IChzdG9yZTogT2JzZXJ2YWJsZTxTPikgPT4gT2JzZXJ2YWJsZTxQYXJ0aWFsPFM+PjtcbiAgLyoqXG4gICAqIFJldHVybnMgd2hldGhlciB0aGUgYWN0dWFsIGltcGxlbWVudGF0aW9uIHNob3VsZCBiZSBydW4uXG4gICAqXG4gICAqIEBkZWZhdWx0ICgpID0+IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnXG4gICAqL1xuICBydW5HdWFyZD86ICgpID0+IGJvb2xlYW47XG4gIC8qKlxuICAgKiBUaGUgbWlncmF0aW9ucyB0byBydW4gd2hlbiB0aGUgc3RhdGUgaXMgcmVzdG9yZWQgZnJvbSBzdG9yYWdlLlxuICAgKi9cbiAgbWlncmF0aW9ucz86IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gIHwgU3RhdGVNaWdyYXRpb248YW55LCBhbnksIGtleW9mIFM+W11cbiAgICAvLyBzdXBwb3J0IHJlYWRvbmx5IHByb1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgfCBSZWFkb25seTxTdGF0ZU1pZ3JhdGlvbjxhbnksIGFueSwga2V5b2YgUz5bXT47XG4gIC8qKlxuICAgKiBUaGUgbnVtYmVyIG9mIHN0YXRlIGNoYW5nZXMgc2tpcHBlZCBiZWZvcmUgdGhlIHN0YXRlIGlzIHBlcnNpc3RlZC5cbiAgICogVXNlZCB0byBza2lwIHRoZSBpbml0aWFsIHN0YXRlIGNoYW5nZS5cbiAgICpcbiAgICogQGRlZmF1bHQgMVxuICAgKi9cbiAgc2tpcD86IG51bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQZXJzaXN0U3RhdGVSb290PFxuICBULFxuICBLIGV4dGVuZHMga2V5b2YgVCxcbiAgUyA9IFRbS10gZXh0ZW5kcyBBbnlGdW5jdGlvbiA/IFN0YXRlPFRbS10+IDogbmV2ZXIsXG4+IGV4dGVuZHMgUGVyc2lzdFN0YXRlQ29uZmlnPFM+IHtcbiAgLyoqXG4gICAqIFRoZSBuYW1lIG9mIGEgc3RvcmUgc2xpY2UgdG8gcGVyc2lzdC5cbiAgICovXG4gIGtleTogSztcbn1cblxudHlwZSBQZXJzaXN0U3RhdGVSb290VHlwZWQ8VD4gPSB7XG4gIFtLIGluIGtleW9mIFRdOiBQZXJzaXN0U3RhdGVSb290PFQsIEs+O1xufVtrZXlvZiBUXTtcblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFBlcnNpc3RTdGF0ZVJvb3RDb25maWc8XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gIFQgZXh0ZW5kcyBBY3Rpb25SZWR1Y2VyTWFwPGFueSwgVj4sXG4gIFYgZXh0ZW5kcyBBY3Rpb24gPSBBY3Rpb24sXG4+IHtcbiAgLyoqXG4gICAqIFRoZSBsaXN0IG9mIHN0YXRlcyB0byBwZXJzaXN0LlxuICAgKi9cbiAgcHVibGljIGFic3RyYWN0IHJlYWRvbmx5IHN0YXRlcz86IFBlcnNpc3RTdGF0ZVJvb3RUeXBlZDxUPltdO1xuICAvKipcbiAgICogVGhlIHN0b3JhZ2Uga2V5IHByZWZpeC5cbiAgICovXG4gIHB1YmxpYyBhYnN0cmFjdCByZWFkb25seSBzdG9yYWdlS2V5UHJlZml4Pzogc3RyaW5nO1xuICAvKipcbiAgICogVGhlIHN0cmF0ZWd5IHVzZWQgb24gYXBwbGljYXRpb24gc3RhcnR1cCB0byByZWh5ZHJhdGUgdGhlIHN0YXRlLlxuICAgKlxuICAgKiBAZGVmYXVsdCBCZWZvcmVBcHBJbml0XG4gICAqL1xuICBwdWJsaWMgYWJzdHJhY3QgcmVhZG9ubHkgc3RyYXRlZ3k/OiB0eXBlb2YgSW5pdGlhbGl6YXRpb25TdHJhdGVneTtcbn1cblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFBlcnNpc3RTdGF0ZUZlYXR1cmVDb25maWc8VD4ge1xuICAvKipcbiAgICogVGhlIGxpc3Qgb2Ygc3RhdGVzIHRvIHBlcnNpc3QuXG4gICAqL1xuICBwdWJsaWMgYWJzdHJhY3QgcmVhZG9ubHkgc3RhdGVzOiBQZXJzaXN0U3RhdGVDb25maWc8VD5bXTtcbiAgLyoqXG4gICAqIFRoZSBuYW1lIG9mIGEgZmVhdHVyZSB0byBwZXJzaXN0LlxuICAgKi9cbiAgcHVibGljIGFic3RyYWN0IHJlYWRvbmx5IGtleTogc3RyaW5nO1xufVxuXG4vKipcbiAqIEluamVjdGlvbiB0b2tlbiBmb3IgdGhlIHN0cmF0ZWd5IHVzZWQgdG8gaW5pdGlhbGl6ZSB0aGUgc3RhdGUuXG4gKi9cbmV4cG9ydCBjb25zdCBQZXJzaXN0U3RhdGVTdHJhdGVneSA9IG5ldyBJbmplY3Rpb25Ub2tlbjxJbml0aWFsaXphdGlvblN0cmF0ZWd5PihcbiAgJ3BlcnNpc3Qtc3RhdGUtaW5pdC1zdHJhdGVneScsXG4pO1xuXG4vKipcbiAqIEluamVjdGlvbiB0b2tlbiBmb3IgdGhlIGxpc3Qgb2Ygc3RhdGVzIHRvIHBlcnNpc3QuXG4gKi9cbmV4cG9ydCBjb25zdCBQRVJTSVNUX1NUQVRFX0ZFQVRVUkVfQ09ORklHUyA9IG5ldyBJbmplY3Rpb25Ub2tlbjxcbiAgUGVyc2lzdFN0YXRlRmVhdHVyZUNvbmZpZzx1bmtub3duPltdXG4+KCdwZXJzaXN0LXN0YXRlLWZlYXR1cmUtY29uZmlncycpO1xuXG5leHBvcnQgY29uc3QgUk9PVF9QRVJTSVNUX1NUT1JFID0gbmV3IEluamVjdGlvblRva2VuPHN0cmluZz4oXG4gICdwZXJzaXN0LXN0YXRlLXJvb3QnLFxuKTtcblxuZXhwb3J0IGNvbnN0IEZFQVRVUkVfUEVSU0lTVF9TVEFURSA9IG5ldyBJbmplY3Rpb25Ub2tlbjxzdHJpbmc+KFxuICAncGVyc2lzdC1zdGF0ZS1mZWF0dXJlJyxcbik7XG4iXX0=