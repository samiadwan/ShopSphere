import { ENVIRONMENT_INITIALIZER, inject, makeEnvironmentProviders, } from '@angular/core';
import { BeforeAppInit, afterAppInitProvider } from '@ngrx-addons/common';
import { META_REDUCERS } from '@ngrx/store';
import { PersistState } from './persist-state';
import { FEATURE_PERSIST_STATE, PERSIST_STATE_FEATURE_CONFIGS, PersistStateRootConfig, PersistStateStrategy, ROOT_PERSIST_STORE, } from './persist-state.config';
import { PersistStateFeature } from './persist-state.feature';
import { persistStateReducer } from './persist-state.meta-reducer';
export const _providePersistStore = (config = {}) => {
    return [
        PersistState,
        { provide: PersistStateRootConfig, useValue: config },
        {
            provide: META_REDUCERS,
            useValue: persistStateReducer,
            multi: true,
        },
        afterAppInitProvider,
        {
            provide: PersistStateStrategy,
            useExisting: config.strategy ?? BeforeAppInit,
        },
    ];
};
export const _providePersistState = (config) => {
    return [
        {
            provide: PERSIST_STATE_FEATURE_CONFIGS,
            useValue: config,
            multi: true,
        },
        PersistStateFeature,
    ];
};
/**
 * Persists the global store.
 * These providers cannot be used at the component level.
 *
 * @usageNotes
 *
 * ### Providing the global Persist Store
 *
 * ```ts
 * bootstrapApplication(AppComponent, {
 *   providers: [provideStore(), providePersistStore()],
 * });
 * ```
 */
export const providePersistStore = (config = {}) => {
    return makeEnvironmentProviders([
        ..._providePersistStore(config),
        {
            provide: ROOT_PERSIST_STORE,
            useFactory: () => {
                inject(PersistState).addRoot();
            },
        },
        {
            provide: ENVIRONMENT_INITIALIZER,
            multi: true,
            useFactory: () => () => inject(ROOT_PERSIST_STORE),
        },
    ]);
};
/**
 * Persists additional slices of state.
 * These providers cannot be used at the component level.
 *
 * @usageNotes
 *
 * ### Persist Store Features
 *
 * ```ts
 * const booksRoutes: Route[] = [
 *   {
 *     path: '',
 *     providers: [provideState('books', booksReducer), providePersistState({ key: 'books' })],
 *     children: [
 *       { path: '', component: BookListComponent },
 *       { path: ':id', component: BookDetailsComponent },
 *     ],
 *   },
 * ];
 * ```
 */
export const providePersistState = (config) => {
    return makeEnvironmentProviders([
        ..._providePersistState(config),
        {
            provide: FEATURE_PERSIST_STATE,
            useFactory: () => {
                inject(PersistStateFeature).addFeatures();
            },
        },
        {
            provide: ENVIRONMENT_INITIALIZER,
            multi: true,
            useFactory: () => () => inject(FEATURE_PERSIST_STATE),
        },
    ]);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVyc2lzdC1zdGF0ZS5wcm92aWRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL2xpYnMvcGVyc2lzdC1zdGF0ZS9zcmMvbGliL3BlcnNpc3Qtc3RhdGUucHJvdmlkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLHVCQUF1QixFQUN2QixNQUFNLEVBQ04sd0JBQXdCLEdBR3pCLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxhQUFhLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUUxRSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQzVDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUUvQyxPQUFPLEVBQ0wscUJBQXFCLEVBQ3JCLDZCQUE2QixFQUM3QixzQkFBc0IsRUFDdEIsb0JBQW9CLEVBQ3BCLGtCQUFrQixHQUNuQixNQUFNLHdCQUF3QixDQUFDO0FBQ2hDLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQzlELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBRW5FLE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFHLENBS2xDLFNBQXVDLEVBQUUsRUFDN0IsRUFBRTtJQUNkLE9BQU87UUFDTCxZQUFZO1FBQ1osRUFBRSxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRTtRQUNyRDtZQUNFLE9BQU8sRUFBRSxhQUFhO1lBQ3RCLFFBQVEsRUFBRSxtQkFBbUI7WUFDN0IsS0FBSyxFQUFFLElBQUk7U0FDWjtRQUNELG9CQUFvQjtRQUNwQjtZQUNFLE9BQU8sRUFBRSxvQkFBb0I7WUFDN0IsV0FBVyxFQUFFLE1BQU0sQ0FBQyxRQUFRLElBQUksYUFBYTtTQUM5QztLQUNGLENBQUM7QUFDSixDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBRyxDQUNsQyxNQUFvQyxFQUN4QixFQUFFO0lBQ2QsT0FBTztRQUNMO1lBQ0UsT0FBTyxFQUFFLDZCQUE2QjtZQUN0QyxRQUFRLEVBQUUsTUFBTTtZQUNoQixLQUFLLEVBQUUsSUFBSTtTQUNaO1FBQ0QsbUJBQW1CO0tBQ3BCLENBQUM7QUFDSixDQUFDLENBQUM7QUFFRjs7Ozs7Ozs7Ozs7OztHQWFHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sbUJBQW1CLEdBQUcsQ0FLakMsU0FBdUMsRUFBRSxFQUNuQixFQUFFO0lBQ3hCLE9BQU8sd0JBQXdCLENBQUM7UUFDOUIsR0FBRyxvQkFBb0IsQ0FBQyxNQUFNLENBQUM7UUFDL0I7WUFDRSxPQUFPLEVBQUUsa0JBQWtCO1lBQzNCLFVBQVUsRUFBRSxHQUFHLEVBQUU7Z0JBQ2YsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQ2pDLENBQUM7U0FDRjtRQUNEO1lBQ0UsT0FBTyxFQUFFLHVCQUF1QjtZQUNoQyxLQUFLLEVBQUUsSUFBSTtZQUNYLFVBQVUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUMsa0JBQWtCLENBQUM7U0FDbkQ7S0FDRixDQUFDLENBQUM7QUFDTCxDQUFDLENBQUM7QUFFRjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FvQkc7QUFDSCxNQUFNLENBQUMsTUFBTSxtQkFBbUIsR0FBRyxDQUNqQyxNQUFvQyxFQUNkLEVBQUU7SUFDeEIsT0FBTyx3QkFBd0IsQ0FBQztRQUM5QixHQUFHLG9CQUFvQixDQUFDLE1BQU0sQ0FBQztRQUMvQjtZQUNFLE9BQU8sRUFBRSxxQkFBcUI7WUFDOUIsVUFBVSxFQUFFLEdBQUcsRUFBRTtnQkFDZixNQUFNLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUM1QyxDQUFDO1NBQ0Y7UUFDRDtZQUNFLE9BQU8sRUFBRSx1QkFBdUI7WUFDaEMsS0FBSyxFQUFFLElBQUk7WUFDWCxVQUFVLEVBQUUsR0FBRyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsTUFBTSxDQUFDLHFCQUFxQixDQUFDO1NBQ3REO0tBQ0YsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgRU5WSVJPTk1FTlRfSU5JVElBTElaRVIsXG4gIGluamVjdCxcbiAgbWFrZUVudmlyb25tZW50UHJvdmlkZXJzLFxuICB0eXBlIEVudmlyb25tZW50UHJvdmlkZXJzLFxuICB0eXBlIFByb3ZpZGVyLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEJlZm9yZUFwcEluaXQsIGFmdGVyQXBwSW5pdFByb3ZpZGVyIH0gZnJvbSAnQG5ncngtYWRkb25zL2NvbW1vbic7XG5pbXBvcnQgdHlwZSB7IEFjdGlvbiwgQWN0aW9uUmVkdWNlck1hcCB9IGZyb20gJ0BuZ3J4L3N0b3JlJztcbmltcG9ydCB7IE1FVEFfUkVEVUNFUlMgfSBmcm9tICdAbmdyeC9zdG9yZSc7XG5pbXBvcnQgeyBQZXJzaXN0U3RhdGUgfSBmcm9tICcuL3BlcnNpc3Qtc3RhdGUnO1xuaW1wb3J0IHR5cGUgeyBQZXJzaXN0U3RhdGVGZWF0dXJlQ29uZmlnIH0gZnJvbSAnLi9wZXJzaXN0LXN0YXRlLmNvbmZpZyc7XG5pbXBvcnQge1xuICBGRUFUVVJFX1BFUlNJU1RfU1RBVEUsXG4gIFBFUlNJU1RfU1RBVEVfRkVBVFVSRV9DT05GSUdTLFxuICBQZXJzaXN0U3RhdGVSb290Q29uZmlnLFxuICBQZXJzaXN0U3RhdGVTdHJhdGVneSxcbiAgUk9PVF9QRVJTSVNUX1NUT1JFLFxufSBmcm9tICcuL3BlcnNpc3Qtc3RhdGUuY29uZmlnJztcbmltcG9ydCB7IFBlcnNpc3RTdGF0ZUZlYXR1cmUgfSBmcm9tICcuL3BlcnNpc3Qtc3RhdGUuZmVhdHVyZSc7XG5pbXBvcnQgeyBwZXJzaXN0U3RhdGVSZWR1Y2VyIH0gZnJvbSAnLi9wZXJzaXN0LXN0YXRlLm1ldGEtcmVkdWNlcic7XG5cbmV4cG9ydCBjb25zdCBfcHJvdmlkZVBlcnNpc3RTdG9yZSA9IDxcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgVCBleHRlbmRzIEFjdGlvblJlZHVjZXJNYXA8YW55LCBWPixcbiAgViBleHRlbmRzIEFjdGlvbiA9IEFjdGlvbixcbj4oXG4gIGNvbmZpZzogUGVyc2lzdFN0YXRlUm9vdENvbmZpZzxULCBWPiA9IHt9LFxuKTogUHJvdmlkZXJbXSA9PiB7XG4gIHJldHVybiBbXG4gICAgUGVyc2lzdFN0YXRlLFxuICAgIHsgcHJvdmlkZTogUGVyc2lzdFN0YXRlUm9vdENvbmZpZywgdXNlVmFsdWU6IGNvbmZpZyB9LFxuICAgIHtcbiAgICAgIHByb3ZpZGU6IE1FVEFfUkVEVUNFUlMsXG4gICAgICB1c2VWYWx1ZTogcGVyc2lzdFN0YXRlUmVkdWNlcixcbiAgICAgIG11bHRpOiB0cnVlLFxuICAgIH0sXG4gICAgYWZ0ZXJBcHBJbml0UHJvdmlkZXIsXG4gICAge1xuICAgICAgcHJvdmlkZTogUGVyc2lzdFN0YXRlU3RyYXRlZ3ksXG4gICAgICB1c2VFeGlzdGluZzogY29uZmlnLnN0cmF0ZWd5ID8/IEJlZm9yZUFwcEluaXQsXG4gICAgfSxcbiAgXTtcbn07XG5cbmV4cG9ydCBjb25zdCBfcHJvdmlkZVBlcnNpc3RTdGF0ZSA9IDxUPihcbiAgY29uZmlnOiBQZXJzaXN0U3RhdGVGZWF0dXJlQ29uZmlnPFQ+LFxuKTogUHJvdmlkZXJbXSA9PiB7XG4gIHJldHVybiBbXG4gICAge1xuICAgICAgcHJvdmlkZTogUEVSU0lTVF9TVEFURV9GRUFUVVJFX0NPTkZJR1MsXG4gICAgICB1c2VWYWx1ZTogY29uZmlnLFxuICAgICAgbXVsdGk6IHRydWUsXG4gICAgfSxcbiAgICBQZXJzaXN0U3RhdGVGZWF0dXJlLFxuICBdO1xufTtcblxuLyoqXG4gKiBQZXJzaXN0cyB0aGUgZ2xvYmFsIHN0b3JlLlxuICogVGhlc2UgcHJvdmlkZXJzIGNhbm5vdCBiZSB1c2VkIGF0IHRoZSBjb21wb25lbnQgbGV2ZWwuXG4gKlxuICogQHVzYWdlTm90ZXNcbiAqXG4gKiAjIyMgUHJvdmlkaW5nIHRoZSBnbG9iYWwgUGVyc2lzdCBTdG9yZVxuICpcbiAqIGBgYHRzXG4gKiBib290c3RyYXBBcHBsaWNhdGlvbihBcHBDb21wb25lbnQsIHtcbiAqICAgcHJvdmlkZXJzOiBbcHJvdmlkZVN0b3JlKCksIHByb3ZpZGVQZXJzaXN0U3RvcmUoKV0sXG4gKiB9KTtcbiAqIGBgYFxuICovXG5leHBvcnQgY29uc3QgcHJvdmlkZVBlcnNpc3RTdG9yZSA9IDxcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgVCBleHRlbmRzIEFjdGlvblJlZHVjZXJNYXA8YW55LCBWPixcbiAgViBleHRlbmRzIEFjdGlvbiA9IEFjdGlvbixcbj4oXG4gIGNvbmZpZzogUGVyc2lzdFN0YXRlUm9vdENvbmZpZzxULCBWPiA9IHt9LFxuKTogRW52aXJvbm1lbnRQcm92aWRlcnMgPT4ge1xuICByZXR1cm4gbWFrZUVudmlyb25tZW50UHJvdmlkZXJzKFtcbiAgICAuLi5fcHJvdmlkZVBlcnNpc3RTdG9yZShjb25maWcpLFxuICAgIHtcbiAgICAgIHByb3ZpZGU6IFJPT1RfUEVSU0lTVF9TVE9SRSxcbiAgICAgIHVzZUZhY3Rvcnk6ICgpID0+IHtcbiAgICAgICAgaW5qZWN0KFBlcnNpc3RTdGF0ZSkuYWRkUm9vdCgpO1xuICAgICAgfSxcbiAgICB9LFxuICAgIHtcbiAgICAgIHByb3ZpZGU6IEVOVklST05NRU5UX0lOSVRJQUxJWkVSLFxuICAgICAgbXVsdGk6IHRydWUsXG4gICAgICB1c2VGYWN0b3J5OiAoKSA9PiAoKSA9PiBpbmplY3QoUk9PVF9QRVJTSVNUX1NUT1JFKSxcbiAgICB9LFxuICBdKTtcbn07XG5cbi8qKlxuICogUGVyc2lzdHMgYWRkaXRpb25hbCBzbGljZXMgb2Ygc3RhdGUuXG4gKiBUaGVzZSBwcm92aWRlcnMgY2Fubm90IGJlIHVzZWQgYXQgdGhlIGNvbXBvbmVudCBsZXZlbC5cbiAqXG4gKiBAdXNhZ2VOb3Rlc1xuICpcbiAqICMjIyBQZXJzaXN0IFN0b3JlIEZlYXR1cmVzXG4gKlxuICogYGBgdHNcbiAqIGNvbnN0IGJvb2tzUm91dGVzOiBSb3V0ZVtdID0gW1xuICogICB7XG4gKiAgICAgcGF0aDogJycsXG4gKiAgICAgcHJvdmlkZXJzOiBbcHJvdmlkZVN0YXRlKCdib29rcycsIGJvb2tzUmVkdWNlciksIHByb3ZpZGVQZXJzaXN0U3RhdGUoeyBrZXk6ICdib29rcycgfSldLFxuICogICAgIGNoaWxkcmVuOiBbXG4gKiAgICAgICB7IHBhdGg6ICcnLCBjb21wb25lbnQ6IEJvb2tMaXN0Q29tcG9uZW50IH0sXG4gKiAgICAgICB7IHBhdGg6ICc6aWQnLCBjb21wb25lbnQ6IEJvb2tEZXRhaWxzQ29tcG9uZW50IH0sXG4gKiAgICAgXSxcbiAqICAgfSxcbiAqIF07XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGNvbnN0IHByb3ZpZGVQZXJzaXN0U3RhdGUgPSA8VD4oXG4gIGNvbmZpZzogUGVyc2lzdFN0YXRlRmVhdHVyZUNvbmZpZzxUPixcbik6IEVudmlyb25tZW50UHJvdmlkZXJzID0+IHtcbiAgcmV0dXJuIG1ha2VFbnZpcm9ubWVudFByb3ZpZGVycyhbXG4gICAgLi4uX3Byb3ZpZGVQZXJzaXN0U3RhdGUoY29uZmlnKSxcbiAgICB7XG4gICAgICBwcm92aWRlOiBGRUFUVVJFX1BFUlNJU1RfU1RBVEUsXG4gICAgICB1c2VGYWN0b3J5OiAoKSA9PiB7XG4gICAgICAgIGluamVjdChQZXJzaXN0U3RhdGVGZWF0dXJlKS5hZGRGZWF0dXJlcygpO1xuICAgICAgfSxcbiAgICB9LFxuICAgIHtcbiAgICAgIHByb3ZpZGU6IEVOVklST05NRU5UX0lOSVRJQUxJWkVSLFxuICAgICAgbXVsdGk6IHRydWUsXG4gICAgICB1c2VGYWN0b3J5OiAoKSA9PiAoKSA9PiBpbmplY3QoRkVBVFVSRV9QRVJTSVNUX1NUQVRFKSxcbiAgICB9LFxuICBdKTtcbn07XG4iXX0=