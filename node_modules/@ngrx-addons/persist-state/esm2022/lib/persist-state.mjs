import { Inject, Injectable } from '@angular/core';
import { InitializationStrategy, isEqual } from '@ngrx-addons/common';
import { Store } from '@ngrx/store';
import { Subject, defaultIfEmpty, distinctUntilChanged, filter, from, map, merge, of, skip, switchMap, takeUntil, tap, } from 'rxjs';
import { rehydrate } from './persist-state.actions';
import { PersistStateRootConfig, PersistStateStrategy, } from './persist-state.config';
import * as i0 from "@angular/core";
import * as i1 from "@ngrx/store";
import * as i2 from "./persist-state.config";
import * as i3 from "@ngrx-addons/common";
const rootState = 'root';
export class PersistState {
    #rootConfig;
    #features = new Map();
    #destroyer = new Subject();
    constructor(store, strategy, rootConfig) {
        this.store = store;
        this.strategy = strategy;
        const { states, storageKeyPrefix, ...restConfig } = rootConfig;
        const keyPrefix = storageKeyPrefix ? `${storageKeyPrefix}-` : '';
        this.#rootConfig = { ...restConfig, storageKeyPrefix: keyPrefix, states };
    }
    addRoot() {
        const merged = this.#rootConfig.states?.map((state) => ({
            ...this.defaultStateConfig(state.key),
            ...state,
            key: state.key,
        })) ?? [];
        this.listenOnStates(merged, rootState).subscribe();
    }
    addFeature(feature) {
        if (this.#features.has(feature.key)) {
            return;
        }
        // Remove in case of re-adding
        this.removeFeature(feature.key);
        this.#features.set(feature.key, true);
        const merged = feature.states.map((state) => ({
            ...this.defaultStateConfig(feature.key),
            ...state,
            key: feature.key,
        }));
        this.listenOnStates(merged, feature.key).subscribe();
    }
    removeFeature(key) {
        this.#destroyer.next(key);
        this.#features.delete(key);
    }
    ngOnDestroy() {
        this.#features.forEach((_, key) => {
            this.removeFeature(key);
        });
        this.#destroyer.next(rootState);
        this.#destroyer.complete();
    }
    defaultStateConfig(key) {
        return {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            storageKey: `${this.#rootConfig.storageKeyPrefix}${key}@store`,
            source: (state) => state,
            runGuard: () => typeof window !== 'undefined',
            migrations: [],
            skip: 1,
        };
    }
    listenOnStates(states, feature) {
        if (states.length === 0) {
            return of(undefined);
        }
        return merge(...states.map((state) => {
            if (!state.runGuard()) {
                return of(undefined);
            }
            const storage = typeof state.storage === 'function' ? state.storage() : state.storage;
            return merge(
            // Restore state from storage
            this.rehydrateWhen(() => from(storage.getItem(state.storageKey))).pipe(filter((value) => !!value), tap((value) => {
                // Run migrations if defined
                if (state.migrations.length) {
                    value = this.runMigrations(value, state.migrations);
                }
                this.store.dispatch(rehydrate({ features: { [state.key]: value } }));
            }), defaultIfEmpty(undefined)), 
            // Save state to storage
            state
                .source(this.store.pipe(map((storeState) => storeState[state.key])))
                .pipe(distinctUntilChanged(isEqual), skip(state.skip), switchMap((value) => storage.setItem(state.storageKey, value))));
        })).pipe(takeUntil(this.#destroyer.pipe(filter((destroyFeature) => destroyFeature === feature))));
    }
    runMigrations(value, migrations) {
        migrations.forEach((migration) => {
            const version = value[(migration.versionKey ?? 'version')];
            if (migration.version === version) {
                value = migration.migrate(value);
            }
        });
        return value;
    }
    rehydrateWhen(input) {
        return this.strategy.when().pipe(switchMap(() => input()));
    }
    /** @nocollapse */ static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.3", ngImport: i0, type: PersistState, deps: [{ token: i1.Store }, { token: PersistStateStrategy }, { token: i2.PersistStateRootConfig }], target: i0.ɵɵFactoryTarget.Injectable }); }
    /** @nocollapse */ static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.0.3", ngImport: i0, type: PersistState }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.3", ngImport: i0, type: PersistState, decorators: [{
            type: Injectable
        }], ctorParameters: () => [{ type: i1.Store }, { type: i3.InitializationStrategy, decorators: [{
                    type: Inject,
                    args: [PersistStateStrategy]
                }] }, { type: i2.PersistStateRootConfig }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVyc2lzdC1zdGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL2xpYnMvcGVyc2lzdC1zdGF0ZS9zcmMvbGliL3BlcnNpc3Qtc3RhdGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbkQsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE9BQU8sRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRXRFLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFcEMsT0FBTyxFQUNMLE9BQU8sRUFDUCxjQUFjLEVBQ2Qsb0JBQW9CLEVBQ3BCLE1BQU0sRUFDTixJQUFJLEVBQ0osR0FBRyxFQUNILEtBQUssRUFDTCxFQUFFLEVBQ0YsSUFBSSxFQUNKLFNBQVMsRUFDVCxTQUFTLEVBQ1QsR0FBRyxHQUNKLE1BQU0sTUFBTSxDQUFDO0FBQ2QsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBS3BELE9BQU8sRUFDTCxzQkFBc0IsRUFDdEIsb0JBQW9CLEdBQ3JCLE1BQU0sd0JBQXdCLENBQUM7Ozs7O0FBRWhDLE1BQU0sU0FBUyxHQUFHLE1BQU0sQ0FBQztBQU16QixNQUFNLE9BQU8sWUFBWTtJQUlkLFdBQVcsQ0FBNEI7SUFDdkMsU0FBUyxHQUFHLElBQUksR0FBRyxFQUFtQixDQUFDO0lBQ3ZDLFVBQVUsR0FBRyxJQUFJLE9BQU8sRUFBVSxDQUFDO0lBRTVDLFlBQ21CLEtBQVksRUFFWixRQUFnQyxFQUNqRCxVQUFxQztRQUhwQixVQUFLLEdBQUwsS0FBSyxDQUFPO1FBRVosYUFBUSxHQUFSLFFBQVEsQ0FBd0I7UUFHakQsTUFBTSxFQUFFLE1BQU0sRUFBRSxnQkFBZ0IsRUFBRSxHQUFHLFVBQVUsRUFBRSxHQUFHLFVBQVUsQ0FBQztRQUMvRCxNQUFNLFNBQVMsR0FBRyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMs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QUFNOzJCQUFDLG9CQUFvQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEluaXRpYWxpemF0aW9uU3RyYXRlZ3ksIGlzRXF1YWwgfSBmcm9tICdAbmdyeC1hZGRvbnMvY29tbW9uJztcbmltcG9ydCB0eXBlIHsgQWN0aW9uUmVkdWNlck1hcCB9IGZyb20gJ0BuZ3J4L3N0b3JlJztcbmltcG9ydCB7IFN0b3JlIH0gZnJvbSAnQG5ncngvc3RvcmUnO1xuaW1wb3J0IHR5cGUgeyBPYnNlcnZhYmxlLCBPYnNlcnZhYmxlSW5wdXQgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7XG4gIFN1YmplY3QsXG4gIGRlZmF1bHRJZkVtcHR5LFxuICBkaXN0aW5jdFVudGlsQ2hhbmdlZCxcbiAgZmlsdGVyLFxuICBmcm9tLFxuICBtYXAsXG4gIG1lcmdlLFxuICBvZixcbiAgc2tpcCxcbiAgc3dpdGNoTWFwLFxuICB0YWtlVW50aWwsXG4gIHRhcCxcbn0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyByZWh5ZHJhdGUgfSBmcm9tICcuL3BlcnNpc3Qtc3RhdGUuYWN0aW9ucyc7XG5pbXBvcnQgdHlwZSB7XG4gIFBlcnNpc3RTdGF0ZUNvbmZpZyxcbiAgUGVyc2lzdFN0YXRlRmVhdHVyZUNvbmZpZyxcbn0gZnJvbSAnLi9wZXJzaXN0LXN0YXRlLmNvbmZpZyc7XG5pbXBvcnQge1xuICBQZXJzaXN0U3RhdGVSb290Q29uZmlnLFxuICBQZXJzaXN0U3RhdGVTdHJhdGVneSxcbn0gZnJvbSAnLi9wZXJzaXN0LXN0YXRlLmNvbmZpZyc7XG5cbmNvbnN0IHJvb3RTdGF0ZSA9ICdyb290JztcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbnR5cGUgU3RhdGVTbGljZSA9IFJlY29yZDxzdHJpbmcsIGFueT47XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBQZXJzaXN0U3RhdGU8XG4gIFQgZXh0ZW5kcyBBY3Rpb25SZWR1Y2VyTWFwPHVua25vd24+ID0gQWN0aW9uUmVkdWNlck1hcDx1bmtub3duPixcbj4gaW1wbGVtZW50cyBPbkRlc3Ryb3lcbntcbiAgcmVhZG9ubHkgI3Jvb3RDb25maWc6IFBlcnNpc3RTdGF0ZVJvb3RDb25maWc8VD47XG4gIHJlYWRvbmx5ICNmZWF0dXJlcyA9IG5ldyBNYXA8c3RyaW5nLCBib29sZWFuPigpO1xuICByZWFkb25seSAjZGVzdHJveWVyID0gbmV3IFN1YmplY3Q8c3RyaW5nPigpO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcmVhZG9ubHkgc3RvcmU6IFN0b3JlLFxuICAgIEBJbmplY3QoUGVyc2lzdFN0YXRlU3RyYXRlZ3kpXG4gICAgcHJpdmF0ZSByZWFkb25seSBzdHJhdGVneTogSW5pdGlhbGl6YXRpb25TdHJhdGVneSxcbiAgICByb290Q29uZmlnOiBQZXJzaXN0U3RhdGVSb290Q29uZmlnPFQ+LFxuICApIHtcbiAgICBjb25zdCB7IHN0YXRlcywgc3RvcmFnZUtleVByZWZpeCwgLi4ucmVzdENvbmZpZyB9ID0gcm9vdENvbmZpZztcbiAgICBjb25zdCBrZXlQcmVmaXggPSBzdG9yYWdlS2V5UHJlZml4ID8gYCR7c3RvcmFnZUtleVByZWZpeH0tYCA6ICcnO1xuICAgIHRoaXMuI3Jvb3RDb25maWcgPSB7IC4uLnJlc3RDb25maWcsIHN0b3JhZ2VLZXlQcmVmaXg6IGtleVByZWZpeCwgc3RhdGVzIH07XG4gIH1cblxuICBwdWJsaWMgYWRkUm9vdCgpOiB2b2lkIHtcbiAgICBjb25zdCBtZXJnZWQgPVxuICAgICAgdGhpcy4jcm9vdENvbmZpZy5zdGF0ZXM/Lm1hcCgoc3RhdGUpID0+ICh7XG4gICAgICAgIC4uLnRoaXMuZGVmYXVsdFN0YXRlQ29uZmlnKHN0YXRlLmtleSBhcyBzdHJpbmcpLFxuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAga2V5OiBzdGF0ZS5rZXkgYXMgc3RyaW5nLFxuICAgICAgfSkpID8/IFtdO1xuICAgIHRoaXMubGlzdGVuT25TdGF0ZXMobWVyZ2VkLCByb290U3RhdGUpLnN1YnNjcmliZSgpO1xuICB9XG5cbiAgcHVibGljIGFkZEZlYXR1cmU8Rj4oZmVhdHVyZTogUGVyc2lzdFN0YXRlRmVhdHVyZUNvbmZpZzxGPik6IHZvaWQge1xuICAgIGlmICh0aGlzLiNmZWF0dXJlcy5oYXMoZmVhdHVyZS5rZXkpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gUmVtb3ZlIGluIGNhc2Ugb2YgcmUtYWRkaW5nXG4gICAgdGhpcy5yZW1vdmVGZWF0dXJlKGZlYXR1cmUua2V5KTtcblxuICAgIHRoaXMuI2ZlYXR1cmVzLnNldChmZWF0dXJlLmtleSwgdHJ1ZSk7XG4gICAgY29uc3QgbWVyZ2VkID0gZmVhdHVyZS5zdGF0ZXMubWFwKChzdGF0ZSkgPT4gKHtcbiAgICAgIC4uLnRoaXMuZGVmYXVsdFN0YXRlQ29uZmlnPEY+KGZlYXR1cmUua2V5KSxcbiAgICAgIC4uLnN0YXRlLFxuICAgICAga2V5OiBmZWF0dXJlLmtleSxcbiAgICB9KSk7XG5cbiAgICB0aGlzLmxpc3Rlbk9uU3RhdGVzKG1lcmdlZCwgZmVhdHVyZS5rZXkpLnN1YnNjcmliZSgpO1xuICB9XG5cbiAgcHVibGljIHJlbW92ZUZlYXR1cmUoa2V5OiBzdHJpbmcpOiB2b2lkIHtcbiAgICB0aGlzLiNkZXN0cm95ZXIubmV4dChrZXkpO1xuICAgIHRoaXMuI2ZlYXR1cmVzLmRlbGV0ZShrZXkpO1xuICB9XG5cbiAgcHVibGljIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgIHRoaXMuI2ZlYXR1cmVzLmZvckVhY2goKF8sIGtleSkgPT4ge1xuICAgICAgdGhpcy5yZW1vdmVGZWF0dXJlKGtleSk7XG4gICAgfSk7XG4gICAgdGhpcy4jZGVzdHJveWVyLm5leHQocm9vdFN0YXRlKTtcbiAgICB0aGlzLiNkZXN0cm95ZXIuY29tcGxldGUoKTtcbiAgfVxuXG4gIHByaXZhdGUgZGVmYXVsdFN0YXRlQ29uZmlnPFM+KFxuICAgIGtleTogc3RyaW5nLFxuICApOiBSZXF1aXJlZDxPbWl0PFBlcnNpc3RTdGF0ZUNvbmZpZzxTPiwgJ3N0b3JhZ2UnPj4ge1xuICAgIHJldHVybiB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5vbi1udWxsLWFzc2VydGlvblxuICAgICAgc3RvcmFnZUtleTogYCR7dGhpcy4jcm9vdENvbmZpZy5zdG9yYWdlS2V5UHJlZml4IX0ke2tleX1Ac3RvcmVgLFxuICAgICAgc291cmNlOiAoc3RhdGUpID0+IHN0YXRlLFxuICAgICAgcnVuR3VhcmQ6ICgpID0+IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnLFxuICAgICAgbWlncmF0aW9uczogW10sXG4gICAgICBza2lwOiAxLFxuICAgIH07XG4gIH1cblxuICBwcml2YXRlIGxpc3Rlbk9uU3RhdGVzPFM+KFxuICAgIHN0YXRlczogUmVxdWlyZWQ8UGVyc2lzdFN0YXRlQ29uZmlnPFM+ICYgeyBrZXk6IHN0cmluZyB9PltdLFxuICAgIGZlYXR1cmU6IHN0cmluZyxcbiAgKTogT2JzZXJ2YWJsZTx1bmtub3duPiB7XG4gICAgaWYgKHN0YXRlcy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBvZih1bmRlZmluZWQpO1xuICAgIH1cblxuICAgIHJldHVybiBtZXJnZShcbiAgICAgIC4uLnN0YXRlcy5tYXAoKHN0YXRlKSA9PiB7XG4gICAgICAgIGlmICghc3RhdGUucnVuR3VhcmQoKSkge1xuICAgICAgICAgIHJldHVybiBvZih1bmRlZmluZWQpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHN0b3JhZ2UgPVxuICAgICAgICAgIHR5cGVvZiBzdGF0ZS5zdG9yYWdlID09PSAnZnVuY3Rpb24nID8gc3RhdGUuc3RvcmFnZSgpIDogc3RhdGUuc3RvcmFnZTtcbiAgICAgICAgcmV0dXJuIG1lcmdlKFxuICAgICAgICAgIC8vIFJlc3RvcmUgc3RhdGUgZnJvbSBzdG9yYWdlXG4gICAgICAgICAgdGhpcy5yZWh5ZHJhdGVXaGVuKCgpID0+XG4gICAgICAgICAgICBmcm9tKHN0b3JhZ2UuZ2V0SXRlbShzdGF0ZS5zdG9yYWdlS2V5KSksXG4gICAgICAgICAgKS5waXBlKFxuICAgICAgICAgICAgZmlsdGVyKCh2YWx1ZSk6IHZhbHVlIGlzIFN0YXRlU2xpY2UgPT4gISF2YWx1ZSksXG4gICAgICAgICAgICB0YXAoKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgIC8vIFJ1biBtaWdyYXRpb25zIGlmIGRlZmluZWRcbiAgICAgICAgICAgICAgaWYgKHN0YXRlLm1pZ3JhdGlvbnMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSB0aGlzLnJ1bk1pZ3JhdGlvbnModmFsdWUsIHN0YXRlLm1pZ3JhdGlvbnMpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgdGhpcy5zdG9yZS5kaXNwYXRjaChcbiAgICAgICAgICAgICAgICByZWh5ZHJhdGUoeyBmZWF0dXJlczogeyBbc3RhdGUua2V5XTogdmFsdWUgfSB9KSxcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgZGVmYXVsdElmRW1wdHkodW5kZWZpbmVkKSxcbiAgICAgICAgICApLFxuICAgICAgICAgIC8vIFNhdmUgc3RhdGUgdG8gc3RvcmFnZVxuICAgICAgICAgIHN0YXRlXG4gICAgICAgICAgICAuc291cmNlKFxuICAgICAgICAgICAgICB0aGlzLnN0b3JlLnBpcGUoXG4gICAgICAgICAgICAgICAgbWFwKFxuICAgICAgICAgICAgICAgICAgKHN0b3JlU3RhdGUpID0+XG4gICAgICAgICAgICAgICAgICAgIHN0b3JlU3RhdGVbc3RhdGUua2V5IGFzIGtleW9mIHR5cGVvZiBzdG9yZVN0YXRlXSxcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgLnBpcGUoXG4gICAgICAgICAgICAgIGRpc3RpbmN0VW50aWxDaGFuZ2VkKGlzRXF1YWwpLFxuICAgICAgICAgICAgICBza2lwKHN0YXRlLnNraXApLFxuICAgICAgICAgICAgICBzd2l0Y2hNYXAoKHZhbHVlKSA9PiBzdG9yYWdlLnNldEl0ZW0oc3RhdGUuc3RvcmFnZUtleSwgdmFsdWUpKSxcbiAgICAgICAgICAgICksXG4gICAgICAgICk7XG4gICAgICB9KSxcbiAgICApLnBpcGUoXG4gICAgICB0YWtlVW50aWwoXG4gICAgICAgIHRoaXMuI2Rlc3Ryb3llci5waXBlKFxuICAgICAgICAgIGZpbHRlcigoZGVzdHJveUZlYXR1cmUpID0+IGRlc3Ryb3lGZWF0dXJlID09PSBmZWF0dXJlKSxcbiAgICAgICAgKSxcbiAgICAgICksXG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgcnVuTWlncmF0aW9uczxTPihcbiAgICB2YWx1ZTogU3RhdGVTbGljZSxcbiAgICBtaWdyYXRpb25zOiBSZXF1aXJlZDxQZXJzaXN0U3RhdGVDb25maWc8Uz4+WydtaWdyYXRpb25zJ10sXG4gICk6IFN0YXRlU2xpY2Uge1xuICAgIG1pZ3JhdGlvbnMuZm9yRWFjaCgobWlncmF0aW9uKSA9PiB7XG4gICAgICBjb25zdCB2ZXJzaW9uID0gdmFsdWVbXG4gICAgICAgIChtaWdyYXRpb24udmVyc2lvbktleSA/PyAndmVyc2lvbicpIGFzIGtleW9mIHR5cGVvZiB2YWx1ZVxuICAgICAgXSBhcyBzdHJpbmcgfCBudW1iZXIgfCB1bmRlZmluZWQ7XG4gICAgICBpZiAobWlncmF0aW9uLnZlcnNpb24gPT09IHZlcnNpb24pIHtcbiAgICAgICAgdmFsdWUgPSBtaWdyYXRpb24ubWlncmF0ZSh2YWx1ZSkgYXMgdHlwZW9mIHZhbHVlO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIHByaXZhdGUgcmVoeWRyYXRlV2hlbjxUPihpbnB1dDogKCkgPT4gT2JzZXJ2YWJsZUlucHV0PFQ+KSB7XG4gICAgcmV0dXJuIHRoaXMuc3RyYXRlZ3kud2hlbigpLnBpcGUoc3dpdGNoTWFwKCgpID0+IGlucHV0KCkpKTtcbiAgfVxufVxuIl19