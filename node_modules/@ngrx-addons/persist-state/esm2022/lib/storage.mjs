import { of } from 'rxjs';
export const noopStorage = {
    getItem: () => of(null),
    setItem: () => of(true),
    removeItem: () => of(true),
};
export const createStorage = (storage) => {
    if (!storage) {
        return noopStorage;
    }
    return {
        getItem: (key) => {
            const v = storage.getItem(key);
            return of(v ? JSON.parse(v) : v);
        },
        setItem: (key, value) => {
            storage.setItem(key, JSON.stringify(value));
            return of(true);
        },
        // eslint-disable-next-line @typescript-eslint/no-invalid-void-type
        removeItem: (key) => {
            storage.removeItem(key);
            return of(true);
        },
    };
};
// we need to wrap the access to window.localStorage and window.sessionStorage in a try catch
// because localStorage can be disabled, or be denied by a security rule
// as soon as we access the property, it throws an error
const tryGetLocalStorage = () => {
    try {
        if (typeof localStorage !== 'undefined') {
            return localStorage;
        }
    }
    catch {
        // Ignore error
    }
    return undefined;
};
export const localStorageStrategy = createStorage(tryGetLocalStorage());
const tryGetSessionStorage = () => {
    try {
        if (typeof sessionStorage !== 'undefined') {
            return sessionStorage;
        }
    }
    catch {
        // Ignore error
    }
    return undefined;
};
export const sessionStorageStrategy = createStorage(tryGetSessionStorage());
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvcmFnZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL2xpYnMvcGVyc2lzdC1zdGF0ZS9zcmMvbGliL3N0b3JhZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQWUxQixNQUFNLENBQUMsTUFBTSxXQUFXLEdBQWlCO0lBQ3ZDLE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDO0lBQ3ZCLE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDO0lBQ3ZCLFVBQVUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDO0NBQzNCLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxhQUFhLEdBQUcsQ0FBQyxPQUE0QixFQUFnQixFQUFFO0lBQzFFLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNiLE9BQU8sV0FBVyxDQUFDO0lBQ3JCLENBQUM7SUFFRCxPQUFPO1FBQ0wsT0FBTyxFQUFFLENBQUksR0FBVyxFQUErQixFQUFFO1lBQ3ZELE1BQU0sQ0FBQyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDL0IsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNuQyxDQUFDO1FBQ0QsT0FBTyxFQUFFLENBQUMsR0FBVyxFQUFFLEtBQThCLEVBQWtCLEVBQUU7WUFDdkUsT0FBTyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQzVDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2xCLENBQUM7UUFDRCxtRUFBbUU7UUFDbkUsVUFBVSxFQUFFLENBQUMsR0FBVyxFQUF5QixFQUFFO1lBQ2pELE9BQU8sQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDeEIsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbEIsQ0FBQztLQUNGLENBQUM7QUFDSixDQUFDLENBQUM7QUFFRiw2RkFBNkY7QUFDN0Ysd0VBQXdFO0FBQ3hFLHdEQUF3RDtBQUN4RCxNQUFNLGtCQUFrQixHQUFHLEdBQXdCLEVBQUU7SUFDbkQsSUFBSSxDQUFDO1FBQ0gsSUFBSSxPQUFPLFlBQVksS0FBSyxXQUFXLEVBQUUsQ0FBQztZQUN4QyxPQUFPLFlBQVksQ0FBQztRQUN0QixDQUFDO0lBQ0gsQ0FBQztJQUFDLE1BQU0sQ0FBQztRQUNQLGVBQWU7SUFDakIsQ0FBQztJQUNELE9BQU8sU0FBUyxDQUFDO0FBQ25CLENBQUMsQ0FBQztBQUNGLE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFHLGFBQWEsQ0FBQyxrQkFBa0IsRUFBRSxDQUFDLENBQUM7QUFFeEUsTUFBTSxvQkFBb0IsR0FBRyxHQUF3QixFQUFFO0lBQ3JELElBQUksQ0FBQztRQUNILElBQUksT0FBTyxjQUFjLEtBQUssV0FBVyxFQUFFLENBQUM7WUFDMUMsT0FBTyxjQUFjLENBQUM7UUFDeEIsQ0FBQztJQUNILENBQUM7SUFBQyxNQUFNLENBQUM7UUFDUCxlQUFlO0lBQ2pCLENBQUM7SUFDRCxPQUFPLFNBQVMsQ0FBQztBQUNuQixDQUFDLENBQUM7QUFDRixNQUFNLENBQUMsTUFBTSxzQkFBc0IsR0FBRyxhQUFhLENBQUMsb0JBQW9CLEVBQUUsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL25nbmVhdC9lbGYvYmxvYi9tYXN0ZXIvcGFja2FnZXMvcGVyc2lzdC1zdGF0ZS9zcmMvbGliL3N0b3JhZ2UudHNcbmltcG9ydCB0eXBlIHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgb2YgfSBmcm9tICdyeGpzJztcblxuZXhwb3J0IHR5cGUgQXN5bmM8VD4gPSBQcm9taXNlPFQ+IHwgT2JzZXJ2YWJsZTxUPjtcblxuZXhwb3J0IGludGVyZmFjZSBTdGF0ZVN0b3JhZ2Uge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICBnZXRJdGVtPFQgZXh0ZW5kcyBSZWNvcmQ8c3RyaW5nLCBhbnk+PihcbiAgICBrZXk6IHN0cmluZyxcbiAgKTogQXN5bmM8VCB8IG51bGwgfCB1bmRlZmluZWQ+O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICBzZXRJdGVtKGtleTogc3RyaW5nLCB2YWx1ZTogUmVjb3JkPHN0cmluZywgYW55Pik6IEFzeW5jPGFueT47XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8taW52YWxpZC12b2lkLXR5cGVcbiAgcmVtb3ZlSXRlbShrZXk6IHN0cmluZyk6IEFzeW5jPGJvb2xlYW4gfCB2b2lkPjtcbn1cblxuZXhwb3J0IGNvbnN0IG5vb3BTdG9yYWdlOiBTdGF0ZVN0b3JhZ2UgPSB7XG4gIGdldEl0ZW06ICgpID0+IG9mKG51bGwpLFxuICBzZXRJdGVtOiAoKSA9PiBvZih0cnVlKSxcbiAgcmVtb3ZlSXRlbTogKCkgPT4gb2YodHJ1ZSksXG59O1xuXG5leHBvcnQgY29uc3QgY3JlYXRlU3RvcmFnZSA9IChzdG9yYWdlOiBTdG9yYWdlIHwgdW5kZWZpbmVkKTogU3RhdGVTdG9yYWdlID0+IHtcbiAgaWYgKCFzdG9yYWdlKSB7XG4gICAgcmV0dXJuIG5vb3BTdG9yYWdlO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBnZXRJdGVtOiA8VD4oa2V5OiBzdHJpbmcpOiBBc3luYzxUIHwgbnVsbCB8IHVuZGVmaW5lZD4gPT4ge1xuICAgICAgY29uc3QgdiA9IHN0b3JhZ2UuZ2V0SXRlbShrZXkpO1xuICAgICAgcmV0dXJuIG9mKHYgPyBKU09OLnBhcnNlKHYpIDogdik7XG4gICAgfSxcbiAgICBzZXRJdGVtOiAoa2V5OiBzdHJpbmcsIHZhbHVlOiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPik6IEFzeW5jPHVua25vd24+ID0+IHtcbiAgICAgIHN0b3JhZ2Uuc2V0SXRlbShrZXksIEpTT04uc3RyaW5naWZ5KHZhbHVlKSk7XG4gICAgICByZXR1cm4gb2YodHJ1ZSk7XG4gICAgfSxcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWludmFsaWQtdm9pZC10eXBlXG4gICAgcmVtb3ZlSXRlbTogKGtleTogc3RyaW5nKTogQXN5bmM8Ym9vbGVhbiB8IHZvaWQ+ID0+IHtcbiAgICAgIHN0b3JhZ2UucmVtb3ZlSXRlbShrZXkpO1xuICAgICAgcmV0dXJuIG9mKHRydWUpO1xuICAgIH0sXG4gIH07XG59O1xuXG4vLyB3ZSBuZWVkIHRvIHdyYXAgdGhlIGFjY2VzcyB0byB3aW5kb3cubG9jYWxTdG9yYWdlIGFuZCB3aW5kb3cuc2Vzc2lvblN0b3JhZ2UgaW4gYSB0cnkgY2F0Y2hcbi8vIGJlY2F1c2UgbG9jYWxTdG9yYWdlIGNhbiBiZSBkaXNhYmxlZCwgb3IgYmUgZGVuaWVkIGJ5IGEgc2VjdXJpdHkgcnVsZVxuLy8gYXMgc29vbiBhcyB3ZSBhY2Nlc3MgdGhlIHByb3BlcnR5LCBpdCB0aHJvd3MgYW4gZXJyb3JcbmNvbnN0IHRyeUdldExvY2FsU3RvcmFnZSA9ICgpOiBTdG9yYWdlIHwgdW5kZWZpbmVkID0+IHtcbiAgdHJ5IHtcbiAgICBpZiAodHlwZW9mIGxvY2FsU3RvcmFnZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybiBsb2NhbFN0b3JhZ2U7XG4gICAgfVxuICB9IGNhdGNoIHtcbiAgICAvLyBJZ25vcmUgZXJyb3JcbiAgfVxuICByZXR1cm4gdW5kZWZpbmVkO1xufTtcbmV4cG9ydCBjb25zdCBsb2NhbFN0b3JhZ2VTdHJhdGVneSA9IGNyZWF0ZVN0b3JhZ2UodHJ5R2V0TG9jYWxTdG9yYWdlKCkpO1xuXG5jb25zdCB0cnlHZXRTZXNzaW9uU3RvcmFnZSA9ICgpOiBTdG9yYWdlIHwgdW5kZWZpbmVkID0+IHtcbiAgdHJ5IHtcbiAgICBpZiAodHlwZW9mIHNlc3Npb25TdG9yYWdlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgcmV0dXJuIHNlc3Npb25TdG9yYWdlO1xuICAgIH1cbiAgfSBjYXRjaCB7XG4gICAgLy8gSWdub3JlIGVycm9yXG4gIH1cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn07XG5leHBvcnQgY29uc3Qgc2Vzc2lvblN0b3JhZ2VTdHJhdGVneSA9IGNyZWF0ZVN0b3JhZ2UodHJ5R2V0U2Vzc2lvblN0b3JhZ2UoKSk7XG4iXX0=