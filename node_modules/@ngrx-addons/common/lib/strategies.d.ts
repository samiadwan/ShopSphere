import type { OnDestroy } from '@angular/core';
import { type Observable } from 'rxjs';
import * as i0 from "@angular/core";
/**
 * Interface for strategies implementing way of initialization
 * of the state.
 */
export declare abstract class InitializationStrategy {
    /**
     * Returns observable that resolves when initialization is done.
     */
    abstract when(): Observable<void>;
}
/**
 * Strategy initializing state after whole angular application is initialized.
 */
export declare class AfterAppInit implements InitializationStrategy, OnDestroy {
    #private;
    when(): Observable<void>;
    /**
     * Mark strategy as initialized. Meant to be called once whole angular
     * application is initialized.
     */
    markAsInitialized(): void;
    /**
     * Cleanup resources.
     */
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<AfterAppInit, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<AfterAppInit>;
}
export declare const afterAppInitProvider: {
    provide: import("@angular/core").InjectionToken<readonly ((compRef: import("@angular/core").ComponentRef<any>) => void)[]>;
    multi: boolean;
    useFactory: (afterInit?: AfterAppInit) => () => void;
};
/**
 * Strategy initializing state as soon as it possible, before angular
 * application is initialized.
 */
export declare class BeforeAppInit implements InitializationStrategy {
    when(): Observable<void>;
    static ɵfac: i0.ɵɵFactoryDeclaration<BeforeAppInit, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<BeforeAppInit>;
}
