{"version":3,"file":"ngrx-addons-common.mjs","sources":["../../../../libs/common/src/lib/create-meta-reducer.ts","../../../../libs/common/src/lib/exclude-keys.ts","../../../../libs/common/src/lib/include-keys.ts","../../../../libs/common/src/lib/is-equal.ts","../../../../libs/common/src/lib/strategies.ts","../../../../libs/common/src/ngrx-addons-common.ts"],"sourcesContent":["import type { Action, ActionReducer } from '@ngrx/store';\n\nexport interface FeaturesProps {\n  features: Record<string, unknown>;\n}\n\ntype ActionCheck = (action: Action) => action is Action & FeaturesProps;\n\nexport const createMergeReducer =\n  (actionCheck: ActionCheck) =>\n  <T = unknown, V extends Action = Action>(reducer: ActionReducer<T, V>) =>\n  (state: T, action: V): T => {\n    let newState = state;\n    if (actionCheck(action)) {\n      const { features } = action;\n      newState = state ? { ...state } : ({} as T);\n      Object.keys(features).forEach((key) => {\n        newState[key as keyof T] = {\n          ...newState[key as keyof T],\n          ...(features[key] as T[keyof T]),\n        };\n      });\n    }\n    return reducer(newState, action);\n  };\n","// Based on https://github.com/ngneat/elf/blob/master/packages/persist-state/src/lib/exclude-keys.ts\nimport type { OperatorFunction } from 'rxjs';\nimport { pipe } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n/**\n * Exclude keys from the state\n */\nexport const excludeKeys = <T extends object>(\n  keys: (keyof T)[],\n): OperatorFunction<T, Partial<T>> => {\n  return pipe(\n    map((state) =>\n      Object.keys(state).reduce<Partial<T>>((toSave, key) => {\n        if (!keys.includes(key as keyof T)) {\n          toSave[key as keyof T] = state[key as keyof T];\n        }\n        return toSave;\n      }, {}),\n    ),\n  );\n};\n","import type { OperatorFunction } from 'rxjs';\nimport { pipe } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n/**\n * Include keys from the state\n */\nexport const includeKeys = <T extends object>(\n  keys: (keyof T)[],\n): OperatorFunction<T, Partial<T>> => {\n  return pipe(\n    map((state) =>\n      Object.keys(state).reduce<Partial<T>>((toSave, key) => {\n        if (keys.includes(key as keyof T)) {\n          toSave[key as keyof T] = state[key as keyof T];\n        }\n        return toSave;\n      }, {}),\n    ),\n  );\n};\n","/**\n * Check if states are equal\n */\nexport const isEqual = <T>(prev: T, next: T): boolean => {\n  if (prev === next) {\n    return true;\n  }\n\n  if (!prev || !next || typeof prev !== 'object' || typeof next !== 'object') {\n    return false;\n  }\n\n  const prevSlices = Object.keys(prev) as (keyof typeof prev)[];\n  const nextSlices = Object.keys(next) as (keyof typeof next)[];\n\n  if (prevSlices.length !== nextSlices.length) {\n    return false;\n  }\n\n  if (prevSlices.some((slice) => !isEqual(prev[slice], next[slice]))) {\n    return false;\n  }\n\n  return true;\n};\n","import type { OnDestroy } from '@angular/core';\nimport { APP_BOOTSTRAP_LISTENER, inject, Injectable } from '@angular/core';\nimport { first, of, ReplaySubject, type Observable } from 'rxjs';\n\n/**\n * Interface for strategies implementing way of initialization\n * of the state.\n */\nexport abstract class InitializationStrategy {\n  /**\n   * Returns observable that resolves when initialization is done.\n   */\n  abstract when(): Observable<void>;\n}\n\n/**\n * Strategy initializing state after whole angular application is initialized.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class AfterAppInit implements InitializationStrategy, OnDestroy {\n  readonly #initialized = new ReplaySubject<void>(1);\n\n  public when(): Observable<void> {\n    return this.#initialized.pipe(first());\n  }\n\n  /**\n   * Mark strategy as initialized. Meant to be called once whole angular\n   * application is initialized.\n   */\n  public markAsInitialized(): void {\n    this.#initialized.next();\n  }\n\n  /**\n   * Cleanup resources.\n   */\n  public ngOnDestroy(): void {\n    this.#initialized.complete();\n  }\n}\n\nexport const afterAppInitProvider = {\n  provide: APP_BOOTSTRAP_LISTENER,\n  multi: true,\n  useFactory:\n    (afterInit: AfterAppInit = inject(AfterAppInit)) =>\n    () => {\n      afterInit.markAsInitialized();\n    },\n};\n\n/**\n * Strategy initializing state as soon as it possible, before angular\n * application is initialized.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class BeforeAppInit implements InitializationStrategy {\n  public when(): Observable<void> {\n    return of(void 0);\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":"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"}