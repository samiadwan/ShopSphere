import { APP_BOOTSTRAP_LISTENER, inject, Injectable } from '@angular/core';
import { first, of, ReplaySubject } from 'rxjs';
import * as i0 from "@angular/core";
/**
 * Interface for strategies implementing way of initialization
 * of the state.
 */
export class InitializationStrategy {
}
/**
 * Strategy initializing state after whole angular application is initialized.
 */
export class AfterAppInit {
    #initialized = new ReplaySubject(1);
    when() {
        return this.#initialized.pipe(first());
    }
    /**
     * Mark strategy as initialized. Meant to be called once whole angular
     * application is initialized.
     */
    markAsInitialized() {
        this.#initialized.next();
    }
    /**
     * Cleanup resources.
     */
    ngOnDestroy() {
        this.#initialized.complete();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.3", ngImport: i0, type: AfterAppInit, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.0.3", ngImport: i0, type: AfterAppInit, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.3", ngImport: i0, type: AfterAppInit, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }] });
export const afterAppInitProvider = {
    provide: APP_BOOTSTRAP_LISTENER,
    multi: true,
    useFactory: (afterInit = inject(AfterAppInit)) => () => {
        afterInit.markAsInitialized();
    },
};
/**
 * Strategy initializing state as soon as it possible, before angular
 * application is initialized.
 */
export class BeforeAppInit {
    when() {
        return of(void 0);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.3", ngImport: i0, type: BeforeAppInit, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.0.3", ngImport: i0, type: BeforeAppInit, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.3", ngImport: i0, type: BeforeAppInit, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RyYXRlZ2llcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL2xpYnMvY29tbW9uL3NyYy9saWIvc3RyYXRlZ2llcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzRSxPQUFPLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxhQUFhLEVBQW1CLE1BQU0sTUFBTSxDQUFDOztBQUVqRTs7O0dBR0c7QUFDSCxNQUFNLE9BQWdCLHNCQUFzQjtDQUszQztBQUVEOztHQUVHO0FBSUgsTUFBTSxPQUFPLFlBQVk7SUFDZCxZQUFZLEdBQUcsSUFBSSxhQUFhLENBQU8sQ0FBQyxDQUFDLENBQUM7SUFFNUMsSUFBSTtRQUNULE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztJQUN6QyxDQUFDO0lBRUQ7OztPQUdHO0lBQ0ksaUJBQWlCO1FBQ3RCLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDM0IsQ0FBQztJQUVEOztPQUVHO0lBQ0ksV0FBVztRQUNoQixJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQy9CLENBQUM7OEdBcEJVLFlBQVk7a0hBQVosWUFBWSxjQUZYLE1BQU07OzJGQUVQLFlBQVk7a0JBSHhCLFVBQVU7bUJBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25COztBQXdCRCxNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBRztJQUNsQyxPQUFPLEVBQUUsc0JBQXNCO0lBQy9CLEtBQUssRUFBRSxJQUFJO0lBQ1gsVUFBVSxFQUNSLENBQUMsWUFBMEIsTUFBTSxDQUFDLFlBQVksQ0FBQyxFQUFFLEVBQUUsQ0FDbkQsR0FBRyxFQUFFO1FBQ0gsU0FBUyxDQUFDLGlCQUFpQixFQUFFLENBQUM7SUFDaEMsQ0FBQztDQUNKLENBQUM7QUFFRjs7O0dBR0c7QUFJSCxNQUFNLE9BQU8sYUFBYTtJQUNqQixJQUFJO1FBQ1QsT0FBTyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUNwQixDQUFDOzhHQUhVLGFBQWE7a0hBQWIsYUFBYSxjQUZaLE1BQU07OzJGQUVQLGFBQWE7a0JBSHpCLFVBQVU7bUJBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFQUF9CT09UU1RSQVBfTElTVEVORVIsIGluamVjdCwgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgZmlyc3QsIG9mLCBSZXBsYXlTdWJqZWN0LCB0eXBlIE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcblxuLyoqXG4gKiBJbnRlcmZhY2UgZm9yIHN0cmF0ZWdpZXMgaW1wbGVtZW50aW5nIHdheSBvZiBpbml0aWFsaXphdGlvblxuICogb2YgdGhlIHN0YXRlLlxuICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgSW5pdGlhbGl6YXRpb25TdHJhdGVneSB7XG4gIC8qKlxuICAgKiBSZXR1cm5zIG9ic2VydmFibGUgdGhhdCByZXNvbHZlcyB3aGVuIGluaXRpYWxpemF0aW9uIGlzIGRvbmUuXG4gICAqL1xuICBhYnN0cmFjdCB3aGVuKCk6IE9ic2VydmFibGU8dm9pZD47XG59XG5cbi8qKlxuICogU3RyYXRlZ3kgaW5pdGlhbGl6aW5nIHN0YXRlIGFmdGVyIHdob2xlIGFuZ3VsYXIgYXBwbGljYXRpb24gaXMgaW5pdGlhbGl6ZWQuXG4gKi9cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbmV4cG9ydCBjbGFzcyBBZnRlckFwcEluaXQgaW1wbGVtZW50cyBJbml0aWFsaXphdGlvblN0cmF0ZWd5LCBPbkRlc3Ryb3kge1xuICByZWFkb25seSAjaW5pdGlhbGl6ZWQgPSBuZXcgUmVwbGF5U3ViamVjdDx2b2lkPigxKTtcblxuICBwdWJsaWMgd2hlbigpOiBPYnNlcnZhYmxlPHZvaWQ+IHtcbiAgICByZXR1cm4gdGhpcy4jaW5pdGlhbGl6ZWQucGlwZShmaXJzdCgpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBNYXJrIHN0cmF0ZWd5IGFzIGluaXRpYWxpemVkLiBNZWFudCB0byBiZSBjYWxsZWQgb25jZSB3aG9sZSBhbmd1bGFyXG4gICAqIGFwcGxpY2F0aW9uIGlzIGluaXRpYWxpemVkLlxuICAgKi9cbiAgcHVibGljIG1hcmtBc0luaXRpYWxpemVkKCk6IHZvaWQge1xuICAgIHRoaXMuI2luaXRpYWxpemVkLm5leHQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDbGVhbnVwIHJlc291cmNlcy5cbiAgICovXG4gIHB1YmxpYyBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICB0aGlzLiNpbml0aWFsaXplZC5jb21wbGV0ZSgpO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCBhZnRlckFwcEluaXRQcm92aWRlciA9IHtcbiAgcHJvdmlkZTogQVBQX0JPT1RTVFJBUF9MSVNURU5FUixcbiAgbXVsdGk6IHRydWUsXG4gIHVzZUZhY3Rvcnk6XG4gICAgKGFmdGVySW5pdDogQWZ0ZXJBcHBJbml0ID0gaW5qZWN0KEFmdGVyQXBwSW5pdCkpID0+XG4gICAgKCkgPT4ge1xuICAgICAgYWZ0ZXJJbml0Lm1hcmtBc0luaXRpYWxpemVkKCk7XG4gICAgfSxcbn07XG5cbi8qKlxuICogU3RyYXRlZ3kgaW5pdGlhbGl6aW5nIHN0YXRlIGFzIHNvb24gYXMgaXQgcG9zc2libGUsIGJlZm9yZSBhbmd1bGFyXG4gKiBhcHBsaWNhdGlvbiBpcyBpbml0aWFsaXplZC5cbiAqL1xuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCcsXG59KVxuZXhwb3J0IGNsYXNzIEJlZm9yZUFwcEluaXQgaW1wbGVtZW50cyBJbml0aWFsaXphdGlvblN0cmF0ZWd5IHtcbiAgcHVibGljIHdoZW4oKTogT2JzZXJ2YWJsZTx2b2lkPiB7XG4gICAgcmV0dXJuIG9mKHZvaWQgMCk7XG4gIH1cbn1cbiJdfQ==